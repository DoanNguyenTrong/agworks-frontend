
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://sdbnesladhtgunpryzzd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNkYm5lc2xhZGh0Z3VucHJ5enpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1NTg1MDIsImV4cCI6MjA1OTEzNDUwMn0.1II3BRsOeMWy_s4wlXqfQhh_9BWD4xmHu4JgoIImR94";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a local storage mock implementation until Supabase is fully setup
import { User, Site, Block, WorkOrder, WorkerApplication, WorkerTask } from "@/lib/types";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Create localStorage helper functions to use as fallback
// These are temporary until the Supabase database is properly set up
export const localStorageApi = {
  getItem: (key: string) => {
    try {
      const item = localStorage.getItem(key);
      return item ? JSON.parse(item) : null;
    } catch (error) {
      console.error(`Error getting ${key} from localStorage:`, error);
      return null;
    }
  },
  setItem: (key: string, value: any) => {
    try {
      localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error(`Error setting ${key} in localStorage:`, error);
    }
  },
  removeItem: (key: string) => {
    try {
      localStorage.removeItem(key);
    } catch (error) {
      console.error(`Error removing ${key} from localStorage:`, error);
    }
  }
};
